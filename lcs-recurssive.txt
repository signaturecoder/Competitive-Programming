#include <bits/stdc++.h>
using namespace std;

#define vi vector<int> vv
#define pb push_back


void signature_input() {
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}

int lcs(string a, string b, int m, int n){
	
	// base condition
	if(m == 0 || n == 0)
	       return 0;
	
	// other condition
	if(a[m-1] == b[n-1])
	/** 
	 * add 1 bcoz the last character is matching in both string
	 * then call lcs with decrease in length of both string
	 **/
	     return 1 + lcs(a, b, m-1, n-1);
	else {
	   return max(lcs(a, b, m, n-1), lcs(a, b, m-1, n));
	}
}


int main( )
{
	signature_input();
	cout << "welcome to programming world!" << endl;
    string x;
	string y;
	cin >> x >> y;
    int m,n, lcsLength = 0;
	m = x.length();
	n = y.length();

	cout << "length of x: " << m << "\n";
	cout << "length of y: " << n << "\n";
    
    lcsLength = lcs(x,y,m,n);
	cout << "length of LCS: " << lcsLength << "\n";

	return 0;
}

// input:
 djf
dfdf

// output: 
welcome to programming world!
length of x: 3
length of y: 4
length of LCS: 2


*******************************************************
memoized and recursion


#include <bits/stdc++.h>
using namespace std;

#define vi vector<int> vv
#define pb push_back
int dp[1001][1001];

void signature_input() {
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}

int lcs(string a, string b, int m, int n){
	
	// base condition
	if(m == 0 || n == 0)
	       return 0;

	/**
	 * chech whether the value is inserted in matrix 
	 * or not other than -1
	 **/
	if(dp[m][n] != -1)
	      return dp[m][n];
	
	// other condition
	if(a[m-1] == b[n-1])
	/** 
	 * add 1 bcoz the last character is matching in both string
	 * then call lcs with decrease in length of both string
	 **/
	     return dp[m][n] = 1 + lcs(a, b, m-1, n-1);
	else {
	   return	dp[m][n] =  max(lcs(a, b, m, n-1), lcs(a, b, m-1, n));
	}
}


int main( )
{
	signature_input();
	cout << "welcome to programming world!" << endl;
    string x;
	string y;
	cin >> x >> y;
    int m,n, lcsLength = 0;
	m = x.length();
	n = y.length();

	cout << "length of x: " << m << "\n";
	cout << "length of y: " << n << "\n";
    
	/**
	 * calling memset to initialise the matrix
	 * with -1 or 0  
	 **/
	memset(dp, -1, sizeof(dp));

	// calling the lcs function and returning the length of subsequence
    lcsLength = lcs(x,y,m,n);
	cout << "length of LCS: " << lcsLength << "\n";

	return 0;
}

i/p :
abcifh
abdpfhi

o/p: 
welcome to programming world!
length of x: 6
length of y: 7
length of LCS: 4

****************************************************************

dp top down approach ==== using matrix
1. fill the first row and column with the base condition of recursive approach.
2. fill the remaining block/ sub-problems with the choice diagram logic
3. Replace m --> i and n--> j;
4. Return dp[m][n];

#include <bits/stdc++.h>
using namespace std;

#define vi vector<int> vv
#define pb push_back
int dp[1001][1001];

void signature_input() {
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}

int lcs(string a, string b, int m, int n){
	
	// base condition
	for(int i = 0; i < m+1; ++i )
	   for(int j = 0; j < n+1; ++j)
	       if(i == 0 || j == 0)
		       dp[i][j] = 0;

    for(int i = 1; i < m + 1; ++i) {
		for(int j = 1; j < n + 1; ++j) {
          // other condition
	        if(a[i-1] == b[j-1]) {
				dp[i][j] = 1 + dp[i-1][j-1];
			} else {
	       	dp[i][j] =  max(dp[i][j-1], dp[i-1][j]);
	}
		}
	}
   return dp[m][n];
}


int main( )
{
	signature_input();
	cout << "welcome to programming world!" << endl;
    string x;
	string y;
	cin >> x >> y;
    int m,n, lcsLength = 0;
	m = x.length();
	n = y.length();

	cout << "length of x: " << m << "\n";
	cout << "length of y: " << n << "\n";

	// calling the lcs function and returning the length of subsequence
    lcsLength = lcs(x,y,m,n);
	cout << "length of LCS: " << lcsLength << "\n";

	return 0;
}

i/p: 
mvc
mbvn

o/p: 
welcome to programming world!
length of x: 3
length of y: 4
length of LCS: 2


**************************************
Longest Common Substring

The only difference is the discontinuety so keep dp[i][j] = 0 in else part;



#include <bits/stdc++.h>
using namespace std;

#define vi vector<int> vv
#define pb push_back
int dp[1001][1001];

void signature_input() {
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}

int lcs(string a, string b, int m, int n){
	
	// base condition
	for(int i = 0; i < m+1; ++i )
	   for(int j = 0; j < n+1; ++j)
	       if(i == 0 || j == 0)
		       dp[i][j] = 0;

    for(int i = 1; i < m + 1; ++i) {
		for(int j = 1; j < n + 1; ++j) {
          // other condition
	        if(a[i-1] == b[j-1]) {
				dp[i][j] = 1 + dp[i-1][j-1];
			} else {
	       	// dp[i][j] =  max(dp[i][j-1], dp[i-1][j]);
			   dp[i][j] = 0;
	}
		}
	}

	// traverse the matrix and find the max and return it.
	int max = dp[0][0];
   for(int i = 0; i < m+1; ++i )
	   for(int j = 0; j < n+1; ++j)
	      if(max < dp[i][j])
		      max = dp[i][j];

	return max;

}


int main( )
{
	signature_input();
	cout << "welcome to programming world!" << endl;
    string x;
	string y;
	cin >> x >> y;
    int m,n, lcsLength = 0;
	m = x.length();
	n = y.length();

	cout << "length of x: " << m << "\n";
	cout << "length of y: " << n << "\n";

	// calling the lcs function and returning the length of subsequence
    lcsLength = lcs(x,y,m,n);
	cout << "length of LCS: " << lcsLength << "\n";

	return 0;
}

i/p;
mbxopw
mbvopw

o/p: 
welcome to programming world!
length of x: 6
length of y: 6
length of LCS: 3

**********************************************************
Longest common sequence string :


#include <bits/stdc++.h>
using namespace std;

#define vi vector<int> vv
#define pb push_back
int dp[1001][1001];

void signature_input() {
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}


string lcs(string a, string b, int m, int n){
	
	// base condition
	for(int i = 0; i < m+1; ++i )
	   for(int j = 0; j < n+1; ++j)
	       if(i == 0 || j == 0)
		       dp[i][j] = 0;

    for(int i = 1; i < m + 1; ++i) {
		for(int j = 1; j < n + 1; ++j) {
          // other condition
	        if(a[i-1] == b[j-1]) {
				dp[i][j] = 1 + dp[i-1][j-1];
			} else {
	       	dp[i][j] =  max(dp[i][j-1], dp[i-1][j]);
	}
	}
	}
  	for(int i = 0; i < m+1; ++i ){
        for(int j = 0; j < n+1; ++j){
          cout << dp[i][j] << " ";
        }       
		cout << "\n";
	  }

	  int k = m, l =n;
	  string s = "";
	  while(k > 0 && l > 0) {
		  if(a[k-1] == b[l-1]) {
             s= s+a[k-1];
			 k--;
			 l--;
			 cout << "value of s :" << s << "\n";
		  } else{
                  if(dp[k][l-1] > dp[k-1][l]){
				  l--;
			  }else {
				  k--;
			  }
		  } 
		  
	  }
	  cout << "Before Reverse String: " << s << endl;
	  reverse(s.begin(), s.end());
	  

   return s;
}


int main( )
{
	signature_input();
	cout << "welcome to programming world!" << endl;
    string x;
	string y;
	cin >> x >> y;
    int m,n;
	string lcsString;
	m = x.length();
	n = y.length();

	cout << "length of x: " << m << "\n";
	cout << "length of y: " << n << "\n";

	// calling the lcs function and returning the length of subsequence
    lcsString = lcs(x,y,m,n);
	cout << " LCS String: " << lcsString << "\n";

	return 0;
}

i/p:
mbxty
mbtxy

o/p:
welcome to programming world!
length of x: 5
length of y: 5
0 0 0 0 0 0 
0 1 1 1 1 1 
0 1 2 2 2 2 
0 1 2 2 3 3 
0 1 2 3 3 3 
0 1 2 3 3 4 
value of s :y
value of s :yx
value of s :yxb
value of s :yxbm
Before Reverse String: yxbm
 LCS String: mbxy



